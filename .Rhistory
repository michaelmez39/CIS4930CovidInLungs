)
merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
infected_raw <- fread(file="data\\GSE162323_slam_inf_params.txt", check.names=TRUE)
uninfected_raw <- fread("data\\GSE162323_slam_uninf_params.txt", check.names=TRUE)
infected_1 = infected_raw[,c(1, 3:8)]
uninfected_1 = uninfected_raw[,c(1, 3:8)]
infected_dedup <- infected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.inf = median(X1h.4sU.Readcount, na.rm=TRUE),
two.hour.inf = median(X2h.4sU.rep1.Readcount),
three.hour.inf = median(X3h.4sU.Readcount),
four.hour.inf = median(X4h.4sU.Readcount)
)
uninfected_dedup <- uninfected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.uninf = median(X1h.4sU.Readcount, na.rm=TRUE),
two.hour.uninf = median(X2h.4sU.rep2.Readcount),
three.hour.uninf = median(X3h.4sU.Readcount),
four.hour.uninf = median(X4h.4sU.Readcount)
)
cts <- merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
infected_dedup <- infected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.inf = median(X1h.4sU.Readcount, na.rm=TRUE),
two.hour.inf = median(X2h.4sU.rep1.Readcount),
three.hour.inf = median(X3h.4sU.Readcount),
four.hour.inf = median(X4h.4sU.Readcount)
)
uninfected_dedup <- uninfected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.uninf = median(X1h.4sU.Readcount, na.rm=TRUE),
two.hour.uninf = median(X2h.4sU.rep2.Readcount),
three.hour.uninf = median(X3h.4sU.Readcount),
four.hour.uninf = median(X4h.4sU.Readcount)
)
cts <- merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
print(cts)
cts %>%
transmute(
expression = max(one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf) - min(one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf)
)
cts %>%
transmute(
expression = max(one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf) - min(one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf)
)
print(cts)
cts %>%
mutate(
expression = max(one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf) - min(one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf)
)
print(cts)
aggregate(
FUN = function(a) {max(a) - min(a)},
data = cts
)
aggregate(
formula = gene.symbol ~ one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf
FUN = function(a) {max(a) - min(a)},
aggregate(
formula = gene.symbol ~ one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf,
FUN = function(a) {max(a) - min(a)},
data = cts
)
aggregate(
formula = gene.symbol ~ (one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf),
aggregate(
formula = gene.symbol ~ c(one.hour.inf, two.hour.inf, three.hour.inf, four.hour.inf, one.hour.uninf, two.hour.uninf, three.hour.uninf, four.hour.uninf),
FUN = function(a) {max(a) - min(a)},
data = cts
)
aggregate(
formula = gene.symbol ~ one.hour.inf,
FUN = function(a) {max(a) - min(a)},
data = cts
)
aggregate(
FUN = function(a) {max(a) - min(a)},
data = cts
)
aggregate(
x = gene.symbol
FUN = function(a) {max(a) - min(a)},
aggregate(
x = gene.symbol,
FUN = function(a) {max(a) - min(a)},
data = cts
)
aggregate(
x = "gene.symbol",
FUN = function(a) {max(a) - min(a)},
data = cts
)
aggregate(
x = cts,
by="gene.symbol"
FUN = function(a) {max(a) - min(a)},
aggregate(
x = cts,
by="gene.symbol",
FUN = function(a) {max(a) - min(a)},
)
aggregate(
x = cts,
by=[gene.symbol],
aggregate(
x = cts,
by=c(gene.symbol),
FUN = function(a) {max(a) - min(a)},
)
aggregate(
x = cts,
by=c("gene.symbol"),
FUN = function(a) {max(a) - min(a)},
)
aggregate(
x = cts,
by=["gene.symbol"],
aggregate(
x = cts,
by=list("gene.symbol"),
FUN = function(a) {max(a) - min(a)},
)
aggregate(
x = cts,
by=list("gene.symbol"),
FUN = mean,
)
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
install.packages(DESeq2)
install.packages("DESeq2")
version()
BiocManager::install("DESeq2")
install.packages("BiocManager")
BiocManager::install("DESeq2")
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
BiocManager::install("DESeq2")
BioConductor::install("GenomicRanges")
Bioc::install("GenomicRanges")
BiocManager::install("DESeq2")
package.install("BiocManager")
installed.packages("BiocManager")
installed.packages("BiocManager")
BiocManager::install(DESeq2)
BiocManager::install("DESeq2")
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
BiocManager::install("DESeq2")
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
BiocManager::install("DESeq2")
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
BiocManager::install(DESeq2)
BiocManager::install("DESeq2")
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
install.packages(DESeq2)
install.packages("DESeq2")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
x86_64-solus-linux-gcc -shared -L/usr/lib64/R/lib -Wl,-O1 -Wl,-z,relro -Wl,-z,now -Wl,-z,max-page-size=0x1000 -Wl,-Bsymbolic-functions -Wl,--sort-common -o RCurl.so base64.o curl.o curlInit.o curl_base64.o enums.o json.o memoryManagement.o myUTF8.o -lcurl -lxml2 -lz -llzma -lm -ldl -L/usr/lib64/R/lib -lR
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
BiocManager::install("DESeq2")
diff <- cts |>
apply(1, function(r) log(max(r) - min(r)))
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
infected_raw <- fread(file="data/GSE162323_slam_inf_params.txt", check.names=TRUE)
uninfected_raw <- fread("data/GSE162323_slam_uninf_params.txt", check.names=TRUE)
infected_1 = infected_raw[,c(1, 3:8)]
uninfected_1 = uninfected_raw[,c(1, 3:8)]
infected_dedup <- infected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.inf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.inf = as.integer(median(X2h.4sU.rep1.Readcount)),
three.hour.inf = as.integer(median(X3h.4sU.Readcount)),
four.hour.inf = as.integer(median(X4h.4sU.Readcount))
)
uninfected_dedup <- uninfected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.uninf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.uninf = as.integer(median(X2h.4sU.rep2.Readcount)),
three.hour.uninf = as.integer(median(X3h.4sU.Readcount)),
four.hour.uninf = as.integer(median(X4h.4sU.Readcount))
)
cts_merged <- merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
cts <- cts_merged[,-1]
rownames(cts) <- cts_merged[,1]
print(cts)
diff <- cts |>
apply(1, function(r) log(max(r) - min(r)))
hist(diff)
diff <- cts |>
apply(1, function(r) log(max(r) - min(r), 2))
hist(diff)
diff <- cts |>
apply(1, function(r) log(max(r) - min(r), 2))
hist(diff, ylab = "Log2Frequency")
coldata <- as.data.frame(names(cts))
coldata$condition <- c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected")
coldata <- as.data.frame(names(cts))
coldata$condition <- c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeq(dds) #this is doing a lot of number crunching
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
res
plotPCA(vsd, intgroup=c("condition"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeq(dds) #this is doing a lot of number crunching
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
res
coldata <- as.data.frame(names(cts))
coldata$condition <- c("infected1", "infected2", "infected3", "infected4", "uninfected1", "uninfected2", "uninfected3", "uninfected4")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeq(dds) #this is doing a lot of number crunching
plotPCA(vsd, intgroup=c("condition"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeq(dds) #this is doing a lot of number crunching
coldata <- as.data.frame(names(cts))
coldata$condition <- rbind(c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected"), c("one", "two", "three", "four", "one", "two", "three", "four"))
coldata <- as.data.frame(names(cts))
coldata$condition <- cbind(c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected"), c("one", "two", "three", "four", "one", "two", "three", "four"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
coldata <- as.data.frame(names(cts))
coldata$condition <- cbind(c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected"), c("one", "two", "three", "four", "one", "two", "three", "four"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition + batches)
coldata <- as.data.frame(names(cts))
coldata$condition <- c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected")
coldata$batches <-  c("one", "two", "three", "four", "one", "two", "three", "four");
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition + batches)
dds <- DESeq(dds) #this is doing a lot of number crunching
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
res
plotPCA(vsd, intgroup=c("condition"))
plotPCA(vsd, intgroup=c("condition"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ batches)
dds <- DESeq(dds) #this is doing a lot of number crunching
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
res
plotPCA(vsd, intgroup=c("condition", "batches"))
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition + batches)
dds <- DESeq(dds) #this is doing a lot of number crunching
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
res
plotPCA(vsd, intgroup=c("condition", "batches"))
plotPCA(vsd, intgroup=c("condition"))
set.seed(9823249)
deseq_df <- res |>
as.data.frame() |>
tibble::rownames_to_column("Gene") |>
dplyr::mutate(threshold = padj < 0.05) |>
arrange(desc(log2FoldChange))
head(deseq_df)
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = deseq_df$Gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01
)
set.seed(9823249)
deseq_df <- res |>
as.data.frame() |>
tibble::rownames_to_column("Gene") |>
dplyr::mutate(threshold = padj < 0.05) |>
arrange(desc(log2FoldChange))
head(deseq_df)
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = deseq_df$Gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01
)
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
library(EnhancedVolcano)
coldata <- as.data.frame(names(cts))
coldata$condition <- c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected")
coldata$batches <-  c("one", "two", "three", "four", "one", "two", "three", "four");
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition + batches)
dds <- DESeq(dds) #this is doing a lot of number crunching
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
res
set.seed(9823249)
deseq_df <- res |>
as.data.frame() |>
tibble::rownames_to_column("Gene") |>
dplyr::mutate(threshold = padj < 0.05) |>
arrange(desc(log2FoldChange))
head(deseq_df)
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = deseq_df$Gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01
)
BiocManager::install("EnhancedVolcano")
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = deseq_df$Gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01
)
volcano_plot <- EnhancedVolcano::EnhancedVolcano(
deseq_df,
lab = deseq_df$Gene,
x = "log2FoldChange",
y = "padj",
pCutoff = 0.01
)
BiocManager::install("EnhancedVolcano")
vsd <- vst(dds, blind=FALSE)
# GSEA Analysis
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
infected_dedup <- infected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.inf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.inf = as.integer(median(X2h.4sU.rep1.Readcount)),
three.hour.inf = as.integer(median(X3h.4sU.Readcount)),
four.hour.inf = as.integer(median(X4h.4sU.Readcount))
)
uninfected_dedup <- uninfected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.uninf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.uninf = as.integer(median(X2h.4sU.rep2.Readcount)),
three.hour.uninf = as.integer(median(X3h.4sU.Readcount)),
four.hour.uninf = as.integer(median(X4h.4sU.Readcount))
)
cts_merged <- merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
cts <- cts_merged[,-1]
rownames(cts) <- cts_merged[,1]
print(cts)
infected_dedup <- infected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.inf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.inf = as.integer(median(X2h.4sU.rep1.Readcount)),
three.hour.inf = as.integer(median(X3h.4sU.Readcount)),
four.hour.inf = as.integer(median(X4h.4sU.Readcount))
)
uninfected_dedup <- uninfected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.uninf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.uninf = as.integer(median(X2h.4sU.rep2.Readcount)),
three.hour.uninf = as.integer(median(X3h.4sU.Readcount)),
four.hour.uninf = as.integer(median(X4h.4sU.Readcount))
)
cts_merged <- merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
cts <- cts_merged[,-1]
rownames(cts) <- cts_merged[,1]
print(cts)
diff <- cts |>
apply(1, function(r) log(max(r) - min(r), 2))
hist(diff, ylab = "Log2Frequency")
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition + batches)
dds <- DESeq(dds) #this is doing a lot of number crunching
cts_merged <- merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
res
cts <- cts_merged[,-1]
rownames(cts) <- cts_merged[,1]
View(Heatmap(as.matrix(most.variable), name = "Counts",
column_split = results[[2]]$consensusClass))
openVignette("ComplexHeatmap")
openVignette("ComplexHeatmap")
library(ComplexHeatmap)
Heatmap(as.matrix(most.variable), name = "Counts",
column_split = results[[2]]$consensusClass)
Heatmap(most.variable, name = "Counts",
column_split = results[[2]]$consensusClass)
# Most Differentially Expressed
most.variable <- head(cts[order(res$log2FoldChange),], 5000)
library(data.table)
library(dplyr)
library(purrr)
library(DESeq2)
# Data Preparation
prepare_data <- function(infected_filepath, uninfected_filepath) {
infected_raw <- fread(file=infected_filepath, check.names=TRUE)
uninfected_raw <- fread(uninfected_filepath, check.names=TRUE)
infected_1 = infected_raw[,c(1, 3:8)]
uninfected_1 = uninfected_raw[,c(1, 3:8)]
infected_dedup <- infected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.inf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.inf = as.integer(median(X2h.4sU.rep1.Readcount)),
three.hour.inf = as.integer(median(X3h.4sU.Readcount)),
four.hour.inf = as.integer(median(X4h.4sU.Readcount))
)
uninfected_dedup <- uninfected_1 %>%
group_by(gene.symbol) %>%
summarize(
one.hour.uninf = as.integer(median(X1h.4sU.Readcount, na.rm=TRUE)),
two.hour.uninf = as.integer(median(X2h.4sU.rep2.Readcount)),
three.hour.uninf = as.integer(median(X3h.4sU.Readcount)),
four.hour.uninf = as.integer(median(X4h.4sU.Readcount))
)
cts_merged <- merge(x=infected_dedup, y=uninfected_dedup, by="gene.symbol")
cts <- cts_merged[,-1]
rownames(cts) <- cts_merged[,1]
return(cts)
}
cts <- prepare_data("data/GSE162323_slam_inf_params.txt", "data/GSE162323_slam_uninf_params.txt")
coldata <- as.data.frame(names(cts))
coldata$condition <- c("infected", "infected", "infected", "infected", "uninfected", "uninfected", "uninfected", "uninfected")
coldata$batches <-  c("one", "two", "three", "four", "one", "two", "three", "four");
# GSEA Analysis
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = coldata,
design = ~ condition)
dds <- DESeq(dds) #this is doing a lot of number crunching
res <- results(dds)
vsd <- vst(dds, blind=FALSE)
# Most Differentially Expressed
most.variable <- head(cts[order(res$log2FoldChange),], 5000)
# # KMeans
# c2 <- kmeans(as.matrix(subset), 3, iter.max = 10, nstart=1)
# Consensus Cluster Analysis
library(ConsensusClusterPlus)
results = ConsensusClusterPlus(as.matrix(most.variable),maxK=6,reps=50,pItem=0.8,pFeature=1,
title="./plots/ConsensusClusterPlus",clusterAlg="hc",distance="pearson",seed=1223618388.7149,plot="png")
library(ComplexHeatmap)
Heatmap(most.variable, name = "Counts",
column_split = results[[2]]$consensusClass)
source("~/Projects/CIS4930CovidInLungs/hw2.r")
heatmap(as.matrix(most.variable), name = "Counts",
column_split = results[[2]]$consensusClass)
heatmap(as.matrix(most.variable), name = "Counts",
column_split = results[[3]]$consensusClass)
warnings()
